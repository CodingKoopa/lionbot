# Define the Docker in Docker anchor.
.dind: &dind
  variables:
    # Set the Docker host to the network connection to the dind service instead of the usual socket.
    DOCKER_HOST: tcp://docker:2375/
  # Use the latest official Docker image.
  image: docker
  services:
    # Enable the Docker service.
    - docker:dind

# Define the stages.
stages:
  # Create a static code analysis stage.
  - analyze
  # Create an app package building stage.
  - build
  # Create an app package deploying stage.
  - deploy

# Define the editorconfig-checker job.
analysis:ec:
  stage: analyze
  # Use the latest ec Docker image.
  image: mstruebing/editorconfig-checker:latest
  script:
    # Check that all text complies with the EditorConfig file.
    - ec

# Define the shfmt job.
analysis:shfmt:
  stage: analyze
  rules:
    - changes:
        - CI/**/*.sh
  # Use the latest Alpine Linux shfmt Docker image.
  image: mvdan/shfmt:latest-alpine
  script:
    # Check that all Bash code has proper formatting.
    - shfmt -d CI

# Define the ShellCheck job.
analysis:shellcheck:
  stage: analyze
  rules:
    - changes:
        - CI/**/*.sh
  # Use the latest stable shellcheck Docker image.
  image: koalaman/shellcheck-alpine:stable
  script:
    # Check that all Bash code is proper.
    - shellcheck -x CI/**/*.sh

# Define the ESLint linting job.
analysis:eslint:
  stage: analyze
  rules:
    - changes:
        - Source/*.js
        - Source/**/*.js
  cache:
    paths:
      # Cache the NPM dependencies.
      - .npm/
  # Use the latest official Node image.
  image: node:latest
  before_script:
    # Install the NPM dependencies.
    - npm ci --cache .npm --prefer-offline
  script:
    # Check that all JavaScript code is proper.
    - npm run lint

# Define the Docker build job.
build:docker:
  <<: *dind
  stage: build
  variables:
    # Set the target architecture to AMD64. This will be able to run on most desktop platforms.
    TARGET_ARCH: amd64
  # Run the Docker build script.
  script: CI/Build/Docker.sh
  artifacts:
    paths:
      # Save the built image.
      - Build/

# Define the Docker deploy job.
deploy:docker:
  <<: *dind
  # Add to the deploying stage.
  stage: deploy
  rules:
    # Deploy if on the "master" branch.
    - if: '$CI_COMMIT_BRANCH == "master"'
    # Deploy if on a tag.
    - if: $CI_COMMIT_TAG
  variables:
    # Don't clone or fetch the Git repo, as the dependencies are all that's needed here.
    GIT_STRATEGY: none
    TARGET_ARCH: amd64
  dependencies:
    # Fetch the image from the build job.
    - build:docker
  # Run the deploying script.
  script: CI/Deploy/Docker.sh
